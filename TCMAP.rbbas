#tag ClassProtected Class TCMAP	#tag Method, Flags = &h0		Function BinaryValue(k As String) As MemoryBlock		  // const void *tcmapget(const TCMAP *map, const void *kbuf, int ksiz, int *sp);		  Declare Function tcmapget Lib libtokyocabinet (map As Ptr, kstr As Ptr, ksize As Integer, sp As Ptr) As Ptr		  		  Dim kstr, vbuf, sp As MemoryBlock		  Dim ksize As Integer		  		  ksize=k.LenB+1		  kstr=New MemoryBlock(ksize)		  kstr.CString(0)=k		  sp=New MemoryBlock(4)		  		  vbuf=tcmapget(map, kstr, ksize, sp)		  		  if sp.UInt32Value(0)>0 Then		    SetErrorMessage(True, "[tcmapget] Success - "+Str(sp.UInt32Value(0)))		  Else		    SetErrorMessage(False, "[tcmapget] Fail!")		  End If		  Return vbuf		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Clear()		  // void tcmapclear(TCMAP *map);		  Declare Sub tcmapclear Lib libtokyocabinet (map As Ptr)		  		  tcmapclear(map)		  		  SetErrorMessage(True, "tcmapclear")		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  // tcmap *tcmapnew(void);		  Declare Function tcmapnew Lib libtokyocabinet () As Ptr		  		  map=tcmapnew()		  		  SetErrorMessage(True, "tcmapnew "+Str(map.Size))		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(buckets As Integer)		  // tcmap *tcmapnew2(uint32_t bnum);		  Declare Function tcmapnew2 Lib libtokyocabinet (bnum As Integer) As Ptr		  		  map=tcmapnew2(buckets)		  		  SetErrorMessage(True, "tcmapnew2 "+Str(map.Size))		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Count() As UInt64		  // uint64_t tcmaprnum(tcmap *map);		  		  Declare Function tcmaprnum Lib libtokyocabinet (map As Ptr) As UInt64		  		  Return tcmaprnum(map)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Destructor()		  // bool tcmapdel(TCmap *map);		  Declare Function tcmapdel Lib libtokyocabinet (map As Ptr) As Boolean		  		  Dim b As Boolean		  b=tcmapdel(map)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ErrorCode() As Integer		  Return OSErr		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ErrorMessage() As String		  Return errmsg		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function HasKey(k As String) As Boolean		  // char *tcmapget2(TCmap *adb, const char *kstr);		  Declare Function tcmapget2 Lib libtokyocabinet (map As Ptr, kstr As Ptr) As CString		  		  Dim kstr As MemoryBlock		  kstr=New MemoryBlock(k.LenB+1)		  kstr.CString(0)=k		  		  Dim vstr As String=tcmapget2(map, kstr)		  Dim v As Variant=vstr		  		  if v<>"" Then		    SetErrorMessage(True, "[HasKey] Success")		    Return True		  Else		    SetErrorMessage(False, "[HasKey] Fail!")		    Return False		  End If		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub IterInit()		  // void tcmapiterinit(TCMAP *map);		  Declare Sub tcmapiterinit Lib libtokyocabinet (map As Ptr)		  		  tcmapiterinit(map)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IterNext() As Variant		  // char *tcmapiternext2(TCmap *map);		  Declare Function tcmapiternext2 Lib libtokyocabinet (map As Ptr) As CString		  		  Dim kstr As String=tcmapiternext2(map)		  		  Dim v As Variant=kstr		  Return v		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Key(index As Integer) As Variant		  Dim v As Variant		  		  if index>Keys.Ubound() Then Return v		  Return myKeys(index)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Keys() As String()		  Return myKeys		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Remove(k As String) As Boolean		  // bool tcmapout2(TCMAP *map, const char *kstr);		  Declare Function tcmapout2 Lib libtokyocabinet (map As Ptr, kstr As Ptr) As Boolean		  		  Dim kstr As MemoryBlock		  kstr=New MemoryBlock(k.LenB+1)		  kstr.CString(0)=k		  		  Dim b As Boolean=tcmapout2(map, kstr)		  if b Then		    // Remove the Keys() entry		    Dim i,j As Integer		    j=myKeys.Ubound()		    For i=0 to j		      if myKeys(i)=k Then		        myKeys.Remove(i)		        Return True		      End If		    Next		  Else		    Return False		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub SetErrorMessage(b As Boolean, m As String)		  if b Then		    OSErr=0		  Else		    OSErr=-1		  End If		  errmsg=m		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Value(k As String) As Variant		  // char *tcmapget2(TCmap *adb, const char *kstr);		  Declare Function tcmapget2 Lib libtokyocabinet (map As Ptr, kstr As Ptr) As CString		  		  Dim kstr As MemoryBlock		  kstr=New MemoryBlock(k.LenB+1)		  kstr.CString(0)=k		  		  Dim vstr As String=tcmapget2(map, kstr)		  Dim v As Variant=vstr		  		  if v<>"" Then		    SetErrorMessage(True, "[tcmapget2] Success")		    Return v		  Else		    SetErrorMessage(False, "[tcmapget2] Fail!")		    Return v		  End If		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Value(k As String, Assigns f As FolderItem)		  // void tcmapput(TCMAP *map, const void *kbuf, int ksiz, const void *vbuf, int vsiz);		  Declare Sub tcmapput Lib libtokyocabinet (map As Ptr, kbuf As Ptr, ksize As Integer, vbuf As Ptr, vsize As Integer)		  		  dim kstr, vbuf As MemoryBlock		  Dim ksize, vsize As Integer		  ksize=k.LenB+1		  kstr=New MemoryBlock(ksize)		  kstr.CString(0)=k		  		  Dim bs As BinaryStream		  bs=bs.Open(f, False)		  if bs=Nil Then		    // Fail!		    SetErrorMessage(False, "[tcmapput] Couldn't open file!")		    Return		  End If		  		  vsize=bs.Length		  vbuf=bs.Read(vsize)		  bs=Nil		  		  tcmapput(map, kstr, ksize, vbuf, vsize)		  		  myKeys.Append k		  		  SetErrorMessage(True, "[tcmapput] "+Str(Count))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Value(k As String, Assigns v As Variant)		  // void tcmapput2(TCmap *map, const char *kstr, const char *vstr);		  Declare Sub tcmapput2 Lib libtokyocabinet (map As Ptr, kstr As Ptr, vstr As Ptr)		  		  dim kstr, vstr As MemoryBlock		  kstr=New MemoryBlock(k.LenB+1)		  kstr.CString(0)=k		  vstr=New MemoryBlock(v.LenB+1)		  vstr.CString(0)=v.StringValue		  		  tcmapput2(map, kstr, vstr)		  		  myKeys.Append k		  		  SetErrorMessage(True, "[tcmapput2] "+Str(Count))		  		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected errmsg As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected map As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected myKeys(-1) As String	#tag EndProperty	#tag Property, Flags = &h1		Protected OSErr As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected path As MemoryBlock	#tag EndProperty	#tag Constant, Name = HDBOCREAT, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBOLCKNB, Type = Double, Dynamic = False, Default = \"32", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBONOLCK, Type = Double, Dynamic = False, Default = \"16", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBOREADER, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBOTRUNC, Type = Double, Dynamic = False, Default = \"8", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBOTSYNC, Type = Double, Dynamic = False, Default = \"64", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBOWRITER, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBTBZIP, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBTDEFLATE, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBTEXCODEC, Type = Double, Dynamic = False, Default = \"16", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBTLARGE, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = HDBTTCBS, Type = Double, Dynamic = False, Default = \"8", Scope = Public	#tag EndConstant	#tag Constant, Name = libtokyocabinet, Type = String, Dynamic = False, Default = \"/usr/local/lib/libtokyocabinet.dylib", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass