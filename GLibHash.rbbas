#tag ClassProtected Class GLibHash	#tag Method, Flags = &h0		Sub Clear()		  // void g_hash_table_remove_all (GHashTable *hash_table);		  		  Declare Sub g_hash_table_remove_all Lib Glib (hash_table As Ptr)		  		  g_hash_table_remove_all(HashTable)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  'GHashTable*         g_hash_table_new                    (GHashFunc hash_func,		  'GEqualFunc key_equal_func);		  		  Declare Function g_hash_table_new Lib GLib (hash_func As Integer, key_equal_func As Integer) As Ptr		  HashTable=g_hash_table_new(0, 0)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Count() As Integer		  // guint g_hash_table_size (GHashTable *hash_table);		  		  Declare Function g_hash_table_size Lib GLib (HashTable As Ptr) As UInt32		  		  Return g_hash_table_size(HashTable)		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ForEach()		  // void g_hash_table_foreach (GHashTable *hash_table, GHFunc func, gpointer user_data);		  		  Declare Sub g_hash_table_foreach Lib Glib (hash_table As Ptr, func As Ptr, user_data As Ptr)		  		  Dim user_data As MemoryBlock="jkjkjk"		  g_hash_table_foreach(HashTable, AddressOf AddToLB, user_data)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub IterInit()		  // void g_hash_table_iter_init (GHashTableIter *iter, GHashTable *hash_table);		  Declare Sub g_hash_table_iter_init Lib GLib (iter As Ptr, hash_table As Ptr)		  		  GHashTableIter=New MemoryBlock(4)		  g_hash_table_iter_init(GHashTableIter, HashTable)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IterNext(ByRef key As String, ByRef value As String) As Boolean		  // gboolean g_hash_table_iter_next (GHashTableIter *iter, gpointer *key, gpointer *value);		  		  if GHashTableIter=Nil Then IterInit()		  		  Declare Function g_hash_table_iter_next Lib GLib (iter As Ptr, key As Ptr, value As Ptr) As Boolean		  		  Dim k,v As MemoryBlock		  k=New MemoryBlock(1024)		  v=New MemoryBlock(1024)		  		  Dim b As Boolean=g_hash_table_iter_next(GHashTableIter, k, v)		  		  if b Then		    key=k.CString(0)		    value=v.CString(0)		  End If		  		  Return b		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Keys() As MemoryBlock		  // GList * g_hash_table_get_keys (GHashTable *hash_table);		  Declare Function g_hash_table_get_keys Lib Glib (hash_table As Ptr) As Ptr		  		  Return g_hash_table_get_keys(HashTable)		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Remove(k As String)		  // gboolean g_hash_table_remove (GHashTable *hash_table, gconstpointer key);		  		  Declare Sub g_hash_table_remove Lib GLib (hash_table As Ptr, key As CString)		  		  g_hash_table_remove(HashTable, k)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Value(k As String) As Variant		  'gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);		  		  Declare Function g_hash_table_lookup Lib Glib (hash_table As Ptr, key As CString) As CString		  		  Dim value As String		  		  value=g_hash_table_lookup(HashTable, k)		  Dim v As Variant=value		  Return v		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Value(k As String, Assigns v As Variant)		  'void g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);		  		  Declare Sub g_hash_table_insert Lib Glib (hash_table As Ptr, key As CString, value As CString)		  		  g_hash_table_insert(HashTable, k, v.StringValue)		  		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		GHashTableIter As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected HashTable As MemoryBlock	#tag EndProperty	#tag Constant, Name = Glib, Type = String, Dynamic = False, Default = \"/usr/local/lib/libglib-2.0.0.dylib", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass