#tag ClassProtected Class GLibHash	#tag Method, Flags = &h0		Sub Clear()		  // void g_hash_table_remove_all (GHashTable *hash_table);		  		  Declare Sub g_hash_table_remove_all Lib GLib (hash_table As Ptr)		  		  g_hash_table_remove_all(HashTable)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  'GHashTable* g_hash_table_new (GHashFunc hash_func, GEqualFunc key_equal_func);		  		  Declare Function g_hash_table_new Lib GLib (hash_func As Integer, key_equal_func As Integer) As Ptr		  HashTable=g_hash_table_new(0, 0)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Count() As Integer		  // guint g_hash_table_size (GHashTable *hash_table);		  		  Declare Function g_hash_table_size Lib GLib (HashTable As Ptr) As UInt32		  		  Return g_hash_table_size(HashTable)		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IntValue(k As String) As Integer		  'gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);		  		  Declare Function g_hash_table_lookup Lib Glib (hash_table As Ptr, key As CString) As CString		  		  Dim value As String		  		  value=g_hash_table_lookup(HashTable, k)		  Return Val(value)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub IntValue(k As String, Assigns v As Integer)		  'void g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);		  		  Declare Sub g_hash_table_insert Lib Glib (hash_table As Ptr, key As CString, value As CString)		  		  g_hash_table_insert(HashTable, k, Str(v))		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub IterInit()		  // void g_hash_table_iter_init (GHashTableIter *iter, GHashTable *hash_table);		  Declare Sub g_hash_table_iter_init Lib GLib (iter As Ptr, hash_table As Ptr)		  		  GHashTableIter=New MemoryBlock(4)		  g_hash_table_iter_init(GHashTableIter, HashTable)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IterNext(ByRef key As String, ByRef value As String) As Boolean		  // gboolean g_hash_table_iter_next (GHashTableIter *iter, gpointer *key, gpointer *value);		  		  if GHashTableIter=Nil Then IterInit()		  		  Declare Function g_hash_table_iter_next Lib GLib (iter As Ptr, key As Ptr, value As Ptr) As Boolean		  		  Dim k,v As MemoryBlock		  k=New MemoryBlock(1024)		  v=New MemoryBlock(1024)		  		  Dim b As Boolean=g_hash_table_iter_next(GHashTableIter, k, v)		  		  if b Then		    key=k.CString(0)		    value=v.CString(0)		  End If		  		  Return b		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Keys() As String()		  // GList * g_hash_table_get_keys (GHashTable *hash_table);		  Declare Function g_hash_table_get_keys Lib Glib (hash_table As Ptr) As Ptr		  		  // void g_list_free (GList *list);		  Declare Sub g_list_free Lib GLib (G_List As Ptr)		  		  // guint g_list_length (GList *list);		  Declare Function g_list_length Lib Glib (G_List As Ptr) As Integer		  		  // GList * g_list_nth (GList *list, guint n);		  Declare Function g_list_nth Lib Glib (G_List As Ptr, n As Integer) As Ptr		  		  		  Dim gl As MemoryBlock = g_hash_table_get_keys(HashTable)		  Dim i,j As Integer		  		  j=g_list_length(gl)-1		  ReDim myKeys(-1)		  For i=0 to j		    Dim x As MemoryBlock=g_list_nth(gl, i)		    Dim y As MemoryBlock=x.ptr(0)		    myKeys.Append y.CString(0)		  Next		  		  g_list_free(gl)		  Return myKeys		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Remove(k As String)		  // gboolean g_hash_table_remove (GHashTable *hash_table, gconstpointer key);		  		  Declare Sub g_hash_table_remove Lib GLib (hash_table As Ptr, key As CString)		  		  g_hash_table_remove(HashTable, k)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function SingleValue(k As String) As Single		  'gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);		  		  Declare Function g_hash_table_lookup Lib Glib (hash_table As Ptr, key As CString) As CString		  		  Dim value As String		  		  value=g_hash_table_lookup(HashTable, k)		  Return Val(value)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SingleValue(k As String, Assigns v As Single)		  'void g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);		  		  Declare Sub g_hash_table_insert Lib Glib (hash_table As Ptr, key As CString, value As CString)		  Dim s As String		  s=Format(v, "#########.#########0")		  g_hash_table_insert(HashTable, k, s)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function StringValue(k As String) As String		  'gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);		  		  Declare Function g_hash_table_lookup Lib Glib (hash_table As Ptr, key As CString) As CString		  		  Return g_hash_table_lookup(HashTable, k)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub StringValue(k As String, Assigns v As String)		  'void g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);		  		  Declare Sub g_hash_table_insert Lib Glib (hash_table As Ptr, key As CString, value As CString)		  		  g_hash_table_insert(HashTable, k, v)		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Value(k As String) As Variant		  'gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);		  		  Declare Function g_hash_table_lookup Lib Glib (hash_table As Ptr, key As CString) As CString		  Dim s As String		  Dim v As Variant		  		  s=g_hash_table_lookup(HashTable, k)		  v=s		  Return v		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Value(k As String, Assigns v As Variant)		  'void g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);		  		  Declare Sub g_hash_table_insert Lib Glib (hash_table As Ptr, key As CString, value As CString)		  Dim s As String		  s=v.StringValue+ChrB(0)		  		  g_hash_table_insert(HashTable, k, s)		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Values() As String()		  // GList * g_hash_table_get_values (GHashTable *hash_table);		  Declare Function g_hash_table_get_values Lib Glib (hash_table As Ptr) As Ptr		  		  // void g_list_free (GList *list);		  Declare Sub g_list_free Lib GLib (G_List As Ptr)		  		  // guint g_list_length (GList *list);		  Declare Function g_list_length Lib Glib (G_List As Ptr) As Integer		  		  // GList * g_list_nth (GList *list, guint n);		  Declare Function g_list_nth Lib Glib (G_List As Ptr, n As Integer) As Ptr		  		  		  Dim gl As MemoryBlock = g_hash_table_get_values(HashTable)		  Dim i,j As Integer		  		  j=g_list_length(gl)-1		  ReDim myValues(-1)		  For i=0 to j		    Dim x As MemoryBlock=g_list_nth(gl, i)		    Dim y As MemoryBlock=x.ptr(0)		    myValues.Append y.CString(0)		  Next		  		  g_list_free(gl)		  Return myValues		End Function	#tag EndMethod	#tag Note, Name = Documentation		http://developer.gnome.org/glib/2.28/glib-Hash-Tables.html	#tag EndNote	#tag Property, Flags = &h0		GHashTableIter As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected HashTable As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected myKeys(-1) As String	#tag EndProperty	#tag Property, Flags = &h1		Protected myValues(-1) As String	#tag EndProperty	#tag Property, Flags = &h0		re As RegEx	#tag EndProperty	#tag Constant, Name = Glib, Type = String, Dynamic = False, Default = \"/tmp/libglib-2.0.0.dylib", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass